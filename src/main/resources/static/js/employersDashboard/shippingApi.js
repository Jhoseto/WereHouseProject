/**
 * SHIPPING API - ENDPOINT MANAGEMENT LAYER
 * =======================================
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∏—Ä–∞–Ω —Å–ª–æ–π –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å–∏—á–∫–∏ API –∑–∞—è–≤–∫–∏ —Å–≤—ä—Ä–∑–∞–Ω–∏ —Å—ä—Å shipping –æ–ø–µ—Ä–∞—Ü–∏–∏.
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–∞ —Å–µ —Å DashboardBroadcastService –∑–∞ real-time functionality.
 * –ê–¥–∞–ø—Ç–∏—Ä–∞–Ω –æ—Ç order-review –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞—Ç–∞ —Å —Ñ–æ–∫—É—Å –≤—ä—Ä—Ö—É warehouse loading tracking.
 */

class ShippingApi {
    constructor() {
        // –û—Å–Ω–æ–≤–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        this.config = window.shippedOrderConfig || {};
        this.orderId = this.config.orderId;

        // API base paths
        this.basePath = '/employer/shipped';

        // WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞ real-time updates
        this.websocket = {
            enabled: this.config.websocket?.enabled || false,
            progressTopic: this.config.websocket?.progressTopic,
            statusTopic: this.config.websocket?.statusTopic,
            connection: null,
            subscribers: new Map()
        };

        // Headers –∑–∞ –∑–∞—è–≤–∫–∏
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            [this.config.csrfHeader]: this.config.csrfToken
        };

        // Event listeners tracking
        this.eventListeners = new Map();

        // Initialize WebSocket –∞–∫–æ –µ enabled
        this.initializeWebSocket();

        console.log('ShippingApi –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω –∑–∞ –ø–æ—Ä—ä—á–∫–∞:', this.orderId);
    }

    /**
     * CORE API METHODS - –û–°–ù–û–í–ù–ò –ó–ê–Ø–í–ö–ò
     * ================================
     */

    /**
     * –ó–∞—Ä–µ–∂–¥–∞ –ø—ä–ª–Ω–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ shipping order
     * –í–∫–ª—é—á–≤–∞ order details, client info –∏ –≤—Å–∏—á–∫–∏ items
     */
    async loadShippingOrderData() {
        try {
            console.log(`üì¶ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ shipping –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞ ${this.orderId}`);

            const response = await fetch(`${this.basePath}/order/${this.orderId}`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    [this.config.csrfHeader]: this.config.csrfToken
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.success && data.order) {
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–¥–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ—Ä—ä—á–∫–∞ ${this.orderId}`);

                // Transform data –∑–∞ –ø–æ-–ª–µ—Å–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ
                const transformedData = this.transformOrderData(data);

                // Broadcast –∑–∞—Ä–µ–¥–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∞–∫–æ –∏–º–∞ WebSocket
                this.broadcastDataLoaded(transformedData);

                return {
                    success: true,
                    data: transformedData,
                    message: '–î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ'
                };
            } else {
                throw new Error(data.message || '–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ');
            }

        } catch (error) {
            console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ shipping –¥–∞–Ω–Ω–∏:`, error);
            return {
                success: false,
                error: error.message,
                message: '–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ. –ú–æ–ª—è –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.'
            };
        }
    }

    /**
     * –ü–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ—Ç–æ –Ω–∞ shipping –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞
     * –ü—Ä–æ–º–µ–Ω—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç CONFIRMED –∫—ä–º SHIPPED
     */
    async confirmShipping(truckNumber, shippingNote = null, loadedItems = []) {
        try {
            console.log(`üöõ –ü–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ shipping –∑–∞ –ø–æ—Ä—ä—á–∫–∞ ${this.orderId}`);

            if (!truckNumber || truckNumber.trim().length === 0) {
                throw new Error('–ù–æ–º–µ—Ä—ä—Ç –Ω–∞ –∫–∞–º–∏–æ–Ω–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω');
            }

            const requestData = {
                truckNumber: truckNumber.trim(),
                shippingNote: shippingNote?.trim() || null,
                loadedItems: loadedItems || [],
                timestamp: new Date().toISOString()
            };

            const response = await fetch(`${this.basePath}/confirm/${this.orderId}`, {
                method: 'POST',
                headers: this.defaultHeaders,
                body: JSON.stringify(requestData)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();

            if (result.success) {
                console.log(`‚úÖ –ü–æ—Ä—ä—á–∫–∞ ${this.orderId} —É—Å–ø–µ—à–Ω–æ –ø–æ—Ç–≤—ä—Ä–¥–µ–Ω–∞ –∫–∞—Ç–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞`);

                // Broadcast shipping confirmed event
                this.broadcastShippingConfirmed(requestData);

                return {
                    success: true,
                    orderId: this.orderId,
                    truckNumber: requestData.truckNumber,
                    newStatus: 'SHIPPED',
                    message: result.message || '–ü–æ—Ä—ä—á–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞'
                };
            } else {
                throw new Error(result.message || '–ù–µ—É—Å–ø–µ—à–Ω–æ –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–Ω–µ');
            }

        } catch (error) {
            console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ shipping:`, error);
            return {
                success: false,
                error: error.message,
                message: '–ù–µ—É—Å–ø–µ—à–Ω–æ –ø–æ—Ç–≤—ä—Ä–∂–¥–∞–≤–∞–Ω–µ. –ú–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.'
            };
        }
    }

    /**
     * REAL-TIME PROGRESS TRACKING
     * ==========================
     */

    /**
     * –ò–∑–ø—Ä–∞—â–∞ real-time update –∑–∞ item loading status
     * –ò–∑–ø–æ–ª–∑–≤–∞ —Å–µ –∫–æ–≥–∞—Ç–æ warehouse —Å–ª—É–∂–∏—Ç–µ–ª –º–∞—Ä–∫–∏—Ä–∞ item –∫–∞—Ç–æ –∑–∞—Ä–µ–¥–µ–Ω
     */
    async updateItemLoadingStatus(itemId, isLoaded, progressData = null) {
        try {
            // –õ–æ–∫–∞–ª–Ω–æ update –∑–∞ –º–æ–º–µ–Ω—Ç–∞–ª–µ–Ω feedback
            this.broadcastItemStatusUpdate(itemId, isLoaded, progressData);

            // –ê–∫–æ –∏–º–∞ WebSocket –≤—Ä—ä–∑–∫–∞, –∏–∑–ø—Ä–∞—Ç–∏ update –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞
            if (this.websocket.enabled && this.websocket.connection) {
                const updateData = {
                    orderId: this.orderId,
                    itemId: itemId,
                    isLoaded: isLoaded,
                    timestamp: new Date().toISOString(),
                    progressData: progressData
                };

                // Send —á—Ä–µ–∑ WebSocket –∑–∞ real-time sync
                this.websocket.connection.send(
                    '/app/shipping/item-status',
                    {},
                    JSON.stringify(updateData)
                );

                console.log(`üì° Real-time update –∏–∑–ø—Ä–∞—Ç–µ–Ω –∑–∞ item ${itemId}: ${isLoaded ? 'loaded' : 'unloaded'}`);
            }

            return { success: true };

        } catch (error) {
            console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ real-time update:`, error);
            return { success: false, error: error.message };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ real-time progress updates –æ—Ç –¥—Ä—É–≥–∏ clients
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ synchron–∏–∑–∏—Ä–∞ loading status –º–µ–∂–¥—É devices
     */
    subscribeToProgressUpdates(callback) {
        if (!this.websocket.enabled) {
            console.warn('WebSocket –Ω–µ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω –∑–∞ real-time updates');
            return () => {}; // Return empty unsubscribe function
        }

        const subscriptionId = `progress_${Date.now()}_${Math.random()}`;
        this.websocket.subscribers.set(subscriptionId, callback);

        console.log(`üì° –ê–±–æ–Ω–∏—Ä–∞–Ω–µ –∑–∞ real-time progress updates —Å ID: ${subscriptionId}`);

        // Return unsubscribe function
        return () => {
            this.websocket.subscribers.delete(subscriptionId);
            console.log(`üì° –û—Ç–ø–∏—Å–≤–∞–Ω–µ –æ—Ç progress updates: ${subscriptionId}`);
        };
    }

    /**
     * WEBSOCKET INTEGRATION
     * ====================
     */

    /**
     * Initialize WebSocket –≤—Ä—ä–∑–∫–∞ –∑–∞ real-time functionality
     * –ò–Ω—Ç–µ–≥—Ä–∏—Ä–∞ —Å–µ —Å—ä—Å —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—è DashboardBroadcastService
     */
    initializeWebSocket() {
        if (!this.websocket.enabled) {
            console.log('WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞');
            return;
        }

        try {
            // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –≥–ª–æ–±–∞–ª–Ω–∏—è WebSocket connection –∞–∫–æ –µ –Ω–∞–ª–∏—á–µ–Ω
            if (window.stompClient && window.stompClient.connected) {
                this.websocket.connection = window.stompClient;
                this.setupWebSocketSubscriptions();
                console.log('‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞ WebSocket –≤—Ä—ä–∑–∫–∞');
            } else {
                // –ò–∑—á–∞–∫–≤–∞–º–µ –≥–ª–æ–±–∞–ª–Ω–∞—Ç–∞ WebSocket –≤—Ä—ä–∑–∫–∞ –¥–∞ —Å–µ —É—Å—Ç–∞–Ω–æ–≤–∏
                this.waitForWebSocketConnection();
            }

        } catch (error) {
            console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ WebSocket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:', error);
            this.websocket.enabled = false;
        }
    }

    /**
     * –ò–∑—á–∞–∫–≤–∞ —É—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ –≥–ª–æ–±–∞–ª–Ω–∞ WebSocket –≤—Ä—ä–∑–∫–∞
     */
    waitForWebSocketConnection() {
        let attempts = 0;
        const maxAttempts = 10;
        const checkInterval = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

        const checkConnection = () => {
            attempts++;

            if (window.stompClient && window.stompClient.connected) {
                this.websocket.connection = window.stompClient;
                this.setupWebSocketSubscriptions();
                console.log('‚úÖ WebSocket –≤—Ä—ä–∑–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–µ–Ω–∞ —Å–ª–µ–¥', attempts, '–æ–ø–∏—Ç–∏');
            } else if (attempts < maxAttempts) {
                setTimeout(checkConnection, checkInterval);
            } else {
                console.warn('‚ö†Ô∏è WebSocket –≤—Ä—ä–∑–∫–∞ –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ —É—Å—Ç–∞–Ω–æ–≤–∏ - real-time —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ —Å–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∏');
                this.websocket.enabled = false;
            }
        };

        setTimeout(checkConnection, checkInterval);
    }

    /**
     * Setup WebSocket subscriptions –∑–∞ shipping events
     */
    setupWebSocketSubscriptions() {
        if (!this.websocket.connection || !this.websocket.progressTopic) {
            return;
        }

        try {
            // Subscribe –∑–∞ progress updates
            this.websocket.connection.subscribe(this.websocket.progressTopic, (message) => {
                const progressData = JSON.parse(message.body);
                this.handleProgressUpdate(progressData);
            });

            // Subscribe –∑–∞ status updates
            if (this.websocket.statusTopic) {
                this.websocket.connection.subscribe(this.websocket.statusTopic, (message) => {
                    const statusData = JSON.parse(message.body);
                    this.handleStatusUpdate(statusData);
                });
            }

            console.log('‚úÖ WebSocket subscriptions setup —É—Å–ø–µ—à–µ–Ω');

        } catch (error) {
            console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ WebSocket subscriptions:', error);
        }
    }

    /**
     * Handle incoming progress updates –æ—Ç WebSocket
     */
    handleProgressUpdate(progressData) {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω progress update:', progressData);

        // Notify –≤—Å–∏—á–∫–∏ subscribers
        this.websocket.subscribers.forEach(callback => {
            try {
                callback(progressData);
            } catch (error) {
                console.error('‚ùå –ì—Ä–µ—à–∫–∞ –≤ progress update callback:', error);
            }
        });
    }

    /**
     * Handle incoming status updates –æ—Ç WebSocket
     */
    handleStatusUpdate(statusData) {
        console.log('üì° –ü–æ–ª—É—á–µ–Ω status update:', statusData);

        // Broadcast status change –∫—ä–º UI components
        if (window.toastManager && statusData.message) {
            window.toastManager.info(statusData.message, 'Status Update');
        }
    }

    /**
     * BROADCASTING METHODS - –õ–û–ö–ê–õ–ù–ò EVENTS
     * ====================================
     */

    /**
     * Broadcast –∑–∞—Ä–µ–¥–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∫—ä–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∏ components
     */
    broadcastDataLoaded(data) {
        const event = new CustomEvent('shippingDataLoaded', {
            detail: { orderId: this.orderId, data: data }
        });
        document.dispatchEvent(event);
    }

    /**
     * Broadcast item status update –∫—ä–º UI components
     */
    broadcastItemStatusUpdate(itemId, isLoaded, progressData) {
        const event = new CustomEvent('shippingItemStatusUpdate', {
            detail: {
                orderId: this.orderId,
                itemId: itemId,
                isLoaded: isLoaded,
                progressData: progressData,
                timestamp: new Date().toISOString()
            }
        });
        document.dispatchEvent(event);
    }

    /**
     * Broadcast shipping confirmed event
     */
    broadcastShippingConfirmed(shippingData) {
        const event = new CustomEvent('shippingConfirmed', {
            detail: { orderId: this.orderId, shippingData: shippingData }
        });
        document.dispatchEvent(event);
    }

    /**
     * UTILITY METHODS
     * ==============
     */

    /**
     * Transform raw order data –∑–∞ –ø–æ-—É–¥–æ–±–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –≤ UI
     */
    /**
     * Transform raw order data –∑–∞ –ø–æ-—É–¥–æ–±–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –≤ UI
     */
    transformOrderData(rawData) {
        const order = rawData.order;
        const items = order.items || [];

        return {
            order: {
                id: order.id,
                status: order.status,
                clientId: order.clientId,
                clientName: order.clientName,
                clientCompany: order.clientCompany,
                totalNet: order.totalNet,
                totalVat: order.totalVat,
                totalGross: order.totalGross,
                submittedAt: order.submittedAt,
                confirmedAt: order.confirmedAt
            },
            client: rawData.client || null,
            items: items.map(item => ({
                id: item.id || 0,
                productId: item.productId || 0,
                productName: item.productName || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç',
                productCategory: item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                // –ü–û–ü–†–ê–í–ö–ê: –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ .intValue() –∑–∞—â–æ—Ç–æ —Ç–æ–≤–∞ –µ JavaScript, –Ω–µ Java
                quantity: typeof item.quantity === 'number' ? item.quantity :
                    (item.quantity ? Number(item.quantity) : 0),
                // –ü–û–ü–†–ê–í–ö–ê: –ò–∑–ø–æ–ª–∑–≤–∞–º–µ 'price' –ø–æ–ª–µ—Ç–æ –æ—Ç OrderMapper –≤–º–µ—Å—Ç–æ 'pricePerUnit'
                pricePerUnit: typeof item.price === 'number' ? item.price :
                    (item.price ? Number(item.price) : 0),
                totalPrice: typeof item.totalPrice === 'number' ? item.totalPrice :
                    (item.totalPrice ? Number(item.totalPrice) : 0),
                isLoaded: false // Default loading status
            })),
            statistics: {
                totalItems: items.length,
                loadedItems: 0,
                remainingItems: items.length,
                completionPercentage: 0
            }
        };
    }

    /**
     * Calculate loading progress statistics
     */
    calculateProgressStatistics(loadedItemsSet, totalItems) {
        const loadedCount = loadedItemsSet.size;
        const remainingCount = totalItems - loadedCount;
        const percentage = totalItems > 0 ? Math.round((loadedCount / totalItems) * 100) : 0;

        return {
            totalItems: totalItems,
            loadedItems: loadedCount,
            remainingItems: remainingCount,
            completionPercentage: percentage,
            isCompleted: loadedCount === totalItems && totalItems > 0
        };
    }

    /**
     * Validate truck number format
     */
    validateTruckNumber(truckNumber) {
        if (!truckNumber || typeof truckNumber !== 'string') {
            return { valid: false, error: '–ù–æ–º–µ—Ä—ä—Ç –Ω–∞ –∫–∞–º–∏–æ–Ω–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω' };
        }

        const trimmed = truckNumber.trim();

        if (trimmed.length < 4) {
            return { valid: false, error: '–ù–æ–º–µ—Ä—ä—Ç –Ω–∞ –∫–∞–º–∏–æ–Ω–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 4 —Å–∏–º–≤–æ–ª–∞' };
        }

        if (trimmed.length > 12) {
            return { valid: false, error: '–ù–æ–º–µ—Ä—ä—Ç –Ω–∞ –∫–∞–º–∏–æ–Ω–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –µ –ø–æ–≤–µ—á–µ –æ—Ç 12 —Å–∏–º–≤–æ–ª–∞' };
        }

        // Basic format validation (–º–æ–∂–∞ –¥–∞ —Å–µ —Ä–∞–∑—à–∏—Ä–∏)
        const validPattern = /^[A-Z0-9\s\-]+$/i;
        if (!validPattern.test(trimmed)) {
            return { valid: false, error: '–ù–æ–º–µ—Ä—ä—Ç —Å—ä–¥—ä—Ä–∂–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∏ —Å–∏–º–≤–æ–ª–∏' };
        }

        return { valid: true, truckNumber: trimmed };
    }

    /**
     * Get shipping validation requirements
     */
    getShippingValidationRequirements() {
        return {
            truckNumberRequired: true,
            allItemsMustBeLoaded: true,
            shippingNoteOptional: true
        };
    }

    /**
     * Cleanup method –∑–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–≤–∞–Ω–µ –Ω–∞ resources
     */
    destroy() {
        // Clear WebSocket subscriptions
        this.websocket.subscribers.clear();

        // Remove event listeners
        this.eventListeners.clear();

        // Clear connection reference
        this.websocket.connection = null;

        console.log('üßπ ShippingApi cleanup –∑–∞–≤—ä—Ä—à–µ–Ω');
    }

    /**
     * COMPATIBILITY METHODS - –ó–∞ backward compatibility
     * =================================================
     */

    /**
     * Alias method –∑–∞ legacy code compatibility
     */
    async getOrderDetails() {
        return await this.loadShippingOrderData();
    }

    /**
     * Alias method –∑–∞ legacy code compatibility
     */
    async submitShipping(data) {
        return await this.confirmShipping(
            data.truckNumber,
            data.shippingNote,
            data.loadedItems
        );
    }
}

// ==========================================
// –ì–õ–û–ë–ê–õ–ù–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò EXPORT
// ==========================================

/**
 * Auto-initialize –∞–∫–æ window.shippedOrderConfig —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
 */
if (typeof window !== 'undefined' && window.shippedOrderConfig) {
    // Export class globally –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –≤ –¥—Ä—É–≥–∏ scripts
    window.ShippingApi = ShippingApi;

    console.log('‚úÖ ShippingApi class —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω –≥–ª–æ–±–∞–ª–Ω–æ');
}

// ES6 Module Export –∞–∫–æ –µ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ShippingApi;
}

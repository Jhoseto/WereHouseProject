/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * BARCODE SCANNER MODULE - Pure JavaScript, No CSS
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 *
 * –§–∞–π–ª: /static/js/shared/barcodeScanner.js
 *
 * Dependency: html5-qrcode (https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js)
 *
 * USAGE:
 *
 *   const scanner = BarcodeScannerManager.getInstance();
 *
 *   scanner.scan({
 *       onSuccess: (productData) => { ... },
 *       onNotFound: (barcode) => { ... },
 *       onError: (error) => { ... }
 *   });
 *
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 */

(function(window) {
    'use strict';

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // PRODUCT DATA SERVICE
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    class ProductDataService {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ API –∏–∑—Ç–æ—á–Ω–∏—Ü–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        static apiSources = [
            {
                name: 'EAN-Search',
                enabled: false, // –©–µ –∞–∫—Ç–∏–≤–∏—Ä–∞—à —Å–ª–µ–¥ –∫–∞—Ç–æ –ø–æ–ª—É—á–∏—à API key
                fetch: async (barcode, apiKey) => {
                    const response = await fetch(`https://api.ean-search.org/api?token=${apiKey}&op=barcode-lookup&format=json&ean=${barcode}`);
                    if (!response.ok) return null;
                    const data = await response.json();
                    return ProductDataService.normalizeEANSearch(data);
                }
            },
            {
                name: 'UPCitemdb',
                enabled: true,
                fetch: async (barcode) => {
                    const response = await fetch(`https://api.upcitemdb.com/prod/trial/lookup?upc=${barcode}`);
                    if (!response.ok) return null;
                    const data = await response.json();
                    if (data.code !== 'OK' || !data.items || data.items.length === 0) return null;
                    return ProductDataService.normalizeUPCitemdb(data.items[0]);
                }
            },
            {
                name: 'OpenFoodFacts',
                enabled: true,
                fetch: async (barcode) => {
                    const response = await fetch(`https://world.openfoodfacts.org/api/v2/product/${barcode}.json`);
                    if (!response.ok) return null;
                    const data = await response.json();
                    if (data.status === 0 || !data.product) return null;
                    return ProductDataService.normalizeOpenFoodFacts(data.product, barcode);
                }
            }
        ];

        static async fetchByBarcode(barcode) {
            console.log(`üîç –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç —Å –±–∞—Ä–∫–æ–¥: ${barcode}`);

            // –û–ø–∏—Ç–≤–∞–º–µ –≤—Å–µ–∫–∏ –∏–∑—Ç–æ—á–Ω–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ
            for (const source of this.apiSources) {
                if (!source.enabled) {
                    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ ${source.name} (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–Ω)`);
                    continue;
                }

                try {
                    console.log(`üì° –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ ${source.name}...`);
                    const productData = await source.fetch(barcode, this.getApiKey(source.name));

                    if (productData) {
                        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–º–µ—Ä–µ–Ω –≤ ${source.name}:`, productData.name);
                        productData.source = source.name; // –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–∑—Ç–æ—á–Ω–∏–∫–∞ –∑–∞ reference
                        return productData;
                    }

                    console.log(`‚ùå –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ ${source.name}`);
                } catch (error) {
                    console.error(`‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ ${source.name}:`, error.message);
                    // –ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ —Å—ä—Å —Å–ª–µ–¥–≤–∞—â–∏—è –∏–∑—Ç–æ—á–Ω–∏–∫
                }
            }

            console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ –Ω–∏—Ç–æ –µ–¥–∏–Ω –∏–∑—Ç–æ—á–Ω–∏–∫');
            return null;
        }

        // –ú–µ—Ç–æ–¥ –∑–∞ —Å—ä—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ API keys (–º–æ–∂–µ—à –¥–∞ –≥–∏ –¥–æ–±–∞–≤–∏—à –≤ config –∏–ª–∏ localStorage)
        static getApiKey(sourceName) {
            const apiKeys = {
                'EAN-Search': 'YOUR_API_KEY_HERE' // –©–µ –≥–æ –∑–∞–º–µ–Ω–∏—à —Å–ª–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            };
            return apiKeys[sourceName] || null;
        }

        // Normalization –∑–∞ UPCitemdb —Ñ–æ—Ä–º–∞—Ç
        static normalizeUPCitemdb(item) {
            return {
                sku: item.ean || item.upc,
                name: item.title || item.brand || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç',
                category: item.category || '–î—Ä—É–≥–∏',
                unit: this.getUnit(item.size || ''),
                description: item.description || '',
                vatRate: 20, // Default –∑–∞ –ë—ä–ª–≥–∞—Ä–∏—è
                price: null,
                quantityAvailable: null,
                metadata: {
                    brand: item.brand || '',
                    images: item.images || []
                }
            };
        }

        // Normalization –∑–∞ EAN-Search —Ñ–æ—Ä–º–∞—Ç
        static normalizeEANSearch(data) {
            if (!data || data.length === 0) return null;

            const product = Array.isArray(data) ? data[0] : data;

            return {
                sku: product.ean,
                name: product.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–æ–¥—É–∫—Ç',
                category: product.categoryName || '–î—Ä—É–≥–∏',
                unit: '–±—Ä',
                description: '',
                vatRate: 20,
                price: null,
                quantityAvailable: null,
                metadata: {
                    brand: product.manufacturer || '',
                    imageUrl: product.image || ''
                }
            };
        }

        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ä–∞—Ç–∞ normalization –∑–∞ OpenFoodFacts
        static normalizeOpenFoodFacts(p, barcode) {
            const name = p.product_name_bg || p.product_name || p.generic_name || `–ü—Ä–æ–¥—É–∫—Ç ${barcode}`;
            const category = this.getCategory(p.categories_tags);

            return {
                sku: barcode,
                name: name,
                category: category,
                unit: this.getUnit(p.quantity),
                description: p.ingredients_text_bg || p.ingredients_text || '',
                vatRate: this.getVAT(category),
                price: null,
                quantityAvailable: null,
                metadata: {
                    brand: p.brands || '',
                    quantity: p.quantity || '',
                    imageUrl: p.image_url || ''
                }
            };
        }

        // –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ utility –º–µ—Ç–æ–¥–∏ –æ—Å—Ç–∞–≤–∞—Ç —Å—ä—â–∏—Ç–µ
        static getCategory(tags) {
            if (!tags || !tags.length) return '–î—Ä—É–≥–∏';
            const map = {
                'beverages': '–ù–∞–ø–∏—Ç–∫–∏',
                'dairies': '–ú–ª–µ—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏',
                'breads': '–•–ª–µ–±–Ω–∏ –∏–∑–¥–µ–ª–∏—è',
                'meats': '–ú–µ—Å–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏',
                'snacks': '–°–Ω–∞–∫—Å–æ–≤–µ',
                'fruits': '–ü–ª–æ–¥–æ–≤–µ –∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏',
                'cereals': '–ó—ä—Ä–Ω–µ–Ω–∏ —Ö—Ä–∞–Ω–∏',
                'seafood': '–†–∏–±–∞ –∏ –º–æ—Ä—Å–∫–∏ –¥–∞—Ä–æ–≤–µ',
                'sweets': '–°–ª–∞–¥–∫–∏—à–∏'
            };
            for (const [key, value] of Object.entries(map)) {
                if (tags[0].includes(key)) return value;
            }
            return '–î—Ä—É–≥–∏';
        }

        static getUnit(quantity) {
            if (!quantity) return '–±—Ä';
            const q = quantity.toLowerCase();
            if (q.includes('–ª')) return '–ª';
            if (q.includes('–∫–≥')) return '–∫–≥';
            return '–±—Ä';
        }

        static getVAT(category) {
            const lowVAT = ['–•–ª–µ–±–Ω–∏ –∏–∑–¥–µ–ª–∏—è', '–ú–ª–µ—á–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏', '–ü–ª–æ–¥–æ–≤–µ –∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏', '–ó—ä—Ä–Ω–µ–Ω–∏ —Ö—Ä–∞–Ω–∏'];
            return lowVAT.includes(category) ? 9 : 20;
        }
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // BARCODE SCANNER MANAGER
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    class BarcodeScannerManager {
        constructor() {
            this.scanner = null;
            this.isScanning = false;
            this.callbacks = {};
        }

        static getInstance() {
            if (!BarcodeScannerManager.instance) {
                BarcodeScannerManager.instance = new BarcodeScannerManager();
            }
            return BarcodeScannerManager.instance;
        }

        isAvailable() {
            return typeof Html5Qrcode !== 'undefined';
        }

        async scan(options = {}) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
            if (!this.isAvailable()) {
                window.toastManager?.error('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ç–∞ –∑–∞ —Å–∫–∞–Ω–∏—Ä–∞–Ω–µ –Ω–µ –µ –∑–∞—Ä–µ–¥–µ–Ω–∞');
                if (options.onError) options.onError(new Error('Library not loaded'));
                return;
            }

            this.callbacks = {
                onSuccess: options.onSuccess || (() => {}),
                onNotFound: options.onNotFound || (() => {}),
                onError: options.onError || (() => {})
            };

            try {
                this.showOverlay();
                await this.startCamera();
            } catch (error) {
                console.error('Scanner error:', error);
                window.toastManager?.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞–º–µ—Ä–∞—Ç–∞: ' + error.message);
                if (this.callbacks.onError) {
                    this.callbacks.onError(error);
                }
                this.hideOverlay();
            }
        }

        showOverlay() {
            const overlay = document.getElementById('barcode-scanner-overlay');
            if (overlay) {
                overlay.classList.add('active');
                overlay.style.display = 'flex';
            }
        }

        hideOverlay() {
            const overlay = document.getElementById('barcode-scanner-overlay');
            if (overlay) {
                overlay.classList.remove('active');
                overlay.style.display = 'none';
            }
        }

        async startCamera() {
            const config = {
                fps: 10,
                qrbox: { width: 300, height: 150 },
                formatsToSupport: [
                    Html5QrcodeSupportedFormats.EAN_13,
                    Html5QrcodeSupportedFormats.EAN_8,
                    Html5QrcodeSupportedFormats.CODE_128,
                    Html5QrcodeSupportedFormats.UPC_A
                ]
            };

            this.scanner = new Html5Qrcode("barcode-camera-feed");

            await this.scanner.start(
                { facingMode: "environment" },
                config,
                (barcode) => this.onBarcodeDetected(barcode),
                () => {} // –ò–≥–Ω–æ—Ä–∏—Ä–∞–º–µ scan errors –∑–∞ –¥–∞ –Ω–µ —Å–ø–∞–º–∏–º
            );

            this.isScanning = true;
            this.showStatus('–ù–∞—Å–æ—á–∏ –∫–∞–º–µ—Ä–∞—Ç–∞ –∫—ä–º –±–∞—Ä–∫–æ–¥–∞...', 'loading');
        }

        async onBarcodeDetected(barcode) {
            if (!this.isScanning) return;

            // –ü–æ–∫–∞–∂–∏ —á–µ –±–∞—Ä–∫–æ–¥—ä—Ç –µ –ø—Ä–æ—á–µ—Ç–µ–Ω
            this.showStatus('‚úì –ë–∞—Ä–∫–æ–¥: ' + barcode, 'success');

            // –ò–∑—á–∞–∫–∞–π –ø–æ–ª–æ–≤–∏–Ω —Å–µ–∫—É–Ω–¥–∞ –∑–∞ –¥–∞ —Å–µ –≤–∏–¥–∏
            await new Promise(resolve => setTimeout(resolve, 500));

            // –°–ø—Ä–∏ –∫–∞–º–µ—Ä–∞—Ç–∞
            await this.stopCamera();

            try {
                // –ù–∞–ø—Ä–∞–≤–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –ë–ï–ó –≤–∏–∑—É–∞–ª–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                const productData = await ProductDataService.fetchByBarcode(barcode);

                if (productData) {
                    // –ü—Ä–æ–¥—É–∫—Ç—ä—Ç –µ –Ω–∞–º–µ—Ä–µ–Ω - –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–∏–∫–∞–π callback-–∞
                    this.callbacks.onSuccess(productData);

                    // Toast —â–µ —Å–µ –ø–æ–∫–∞–∂–µ –æ—Ç ProductModal
                } else {
                    // –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω
                    this.callbacks.onNotFound(barcode);
                }
            } catch (error) {
                console.error('Product fetch error:', error);
                window.toastManager?.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç');

                if (this.callbacks.onError) {
                    this.callbacks.onError(error);
                }
            }
        }

        async stopCamera() {
            if (this.scanner && this.isScanning) {
                try {
                    await this.scanner.stop();
                    this.scanner.clear();
                } catch (error) {
                    console.error('Stop camera error:', error);
                }
            }
            this.isScanning = false;
            this.hideOverlay();
        }

        showStatus(message, type = '') {
            const status = document.getElementById('barcode-scanner-status');
            if (status) {
                status.textContent = message;
                status.className = 'scanner-status active ' + type;
            }
        }
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // INITIALIZATION & CLEANUP
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    document.addEventListener('DOMContentLoaded', () => {
        const closeBtn = document.getElementById('barcode-scanner-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                BarcodeScannerManager.getInstance().stopCamera();
            });
        }
    });

    window.addEventListener('beforeunload', () => {
        BarcodeScannerManager.getInstance().stopCamera();
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // EXPORT
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    window.BarcodeScannerManager = BarcodeScannerManager;
    window.ProductDataService = ProductDataService;

})(window);
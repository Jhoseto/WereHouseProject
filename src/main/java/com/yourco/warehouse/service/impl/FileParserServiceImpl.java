package com.yourco.warehouse.service.impl;



import com.yourco.warehouse.dto.importSystem.ParsedFileDataDTO;
import com.yourco.warehouse.service.FileParserService;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;

/**
 * –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ FileParserService.
 * –ò–∑–ø–æ–ª–∑–≤–∞ Apache POI –∑–∞ Excel –∏ OpenCSV –∑–∞ CSV —Ñ–∞–π–ª–æ–≤–µ.
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω–∞ –∑–∞ –±—ä—Ä–∑–æ —á–µ—Ç–µ–Ω–µ –Ω–∞ –≥–æ–ª–µ–º–∏ —Ñ–∞–π–ª–æ–≤–µ.
 */
@Service
public class FileParserServiceImpl implements FileParserService {

    private static final int MAX_PREVIEW_ROWS = 5;
    private static final Set<String> EXCEL_EXTENSIONS = Set.of("xlsx", "xls");
    private static final Set<String> CSV_EXTENSIONS = Set.of("csv", "txt");

    @Override
    public ParsedFileDataDTO parseFile(MultipartFile file) {
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("–§–∞–π–ª—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω –∏–ª–∏ –ª–∏–ø—Å–≤–∞");
        }

        String fileName = file.getOriginalFilename();
        if (fileName == null) {
            throw new IllegalArgumentException("–§–∞–π–ª—ä—Ç –Ω—è–º–∞ –∏–º–µ");
        }

        String extension = getFileExtension(fileName).toLowerCase();

        if (EXCEL_EXTENSIONS.contains(extension)) {
            return parseExcelFile(file);
        } else if (CSV_EXTENSIONS.contains(extension)) {
            return parseCsvFile(file);
        } else {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥—ä—Ä–∂–∞–Ω —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç: " + extension);
        }
    }

    @Override
    public boolean isSupportedFormat(String fileName) {
        if (fileName == null) {
            return false;
        }
        String extension = getFileExtension(fileName).toLowerCase();
        return EXCEL_EXTENSIONS.contains(extension) || CSV_EXTENSIONS.contains(extension);
    }

    /**
     * –ü–∞—Ä—Å–≤–∞ Excel —Ñ–∞–π–ª (XLS –∏–ª–∏ XLSX).
     * –ò–∑–ø–æ–ª–∑–≤–∞ Apache POI –∫–æ–π—Ç–æ —Ä–∞–±–æ—Ç–∏ –¥–∏—Ä–µ–∫—Ç–Ω–æ —Å binary —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ Excel.
     * –ß–µ—Ç–µ –ø—ä—Ä–≤–∏—è sheet –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ.
     */
    private ParsedFileDataDTO parseExcelFile(MultipartFile file) {
        try {
            Workbook workbook;
            String fileName = file.getOriginalFilename();

            if (fileName.endsWith(".xlsx")) {
                workbook = new XSSFWorkbook(file.getInputStream());
            } else {
                workbook = new HSSFWorkbook(file.getInputStream());
            }

            Sheet sheet = workbook.getSheetAt(0);

            // üî• –ù–∞–º–∏—Ä–∞–º–µ header —Ä–µ–¥–∞ –∏–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ
            Row headerRow = null;
            int headerRowIndex = -1;
            int lastRowNum = sheet.getLastRowNum();

            for (int i = 0; i <= Math.min(lastRowNum, 10); i++) { // –¢—ä—Ä—Å–∏–º –≤ –ø—ä—Ä–≤–∏—Ç–µ 10 —Ä–µ–¥–∞
                Row row = sheet.getRow(i);
                if (row == null) continue;

                Cell firstCell = row.getCell(0);
                if (firstCell != null) {
                    String cellValue = getCellValueAsString(firstCell).toLowerCase();
                    // –¢—ä—Ä—Å–∏–º –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏ –∑–∞ header
                    if (cellValue.contains("–∞—Ä—Ç") || cellValue.contains("sku") ||
                            cellValue.contains("–∫–æ–¥") || cellValue.contains("–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")) {
                        headerRow = row;
                        headerRowIndex = i;
                        break;
                    }
                }
            }

            // –ê–∫–æ –Ω–µ –Ω–∞–º–µ—Ä–∏–º header —Å –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –ø—ä—Ä–≤–∏—è –Ω–µ–ø—Ä–∞–∑–µ–Ω —Ä–µ–¥
            if (headerRow == null) {
                headerRow = sheet.getRow(0);
                headerRowIndex = 0;
            }

            if (headerRow == null) {
                workbook.close();
                throw new IllegalArgumentException("–§–∞–π–ª—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω - –Ω—è–º–∞ header —Ä–µ–¥");
            }

            // –ò–∑–≤–ª–∏—á–∞–º–µ –∏–º–µ–Ω–∞—Ç–∞ –Ω–∞ –∫–æ–ª–æ–Ω–∏—Ç–µ
            List<String> columnNames = new ArrayList<>();
            int columnCount = headerRow.getLastCellNum();

            for (int i = 0; i < columnCount; i++) {
                Cell cell = headerRow.getCell(i);
                String columnName = cell != null ? getCellValueAsString(cell) : "–ö–æ–ª–æ–Ω–∞ " + (i + 1);
                columnNames.add(columnName.trim());
            }

            // –ß–µ—Ç–µ–º –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ —Å –¥–∞–Ω–Ω–∏ –°–õ–ï–î header —Ä–µ–¥–∞
            List<Map<String, String>> rows = new ArrayList<>();
            int rowCount = sheet.getLastRowNum();

            // üî• –ö–†–ò–¢–ò–ß–ù–ê –ü–†–û–ú–Ø–ù–ê: –ó–∞–ø–æ—á–≤–∞–º–µ –æ—Ç —Ä–µ–¥–∞ –°–õ–ï–î header-–∞
            for (int rowIndex = headerRowIndex + 1; rowIndex <= rowCount; rowIndex++) {
                Row row = sheet.getRow(rowIndex);
                if (row == null || isRowEmpty(row)) {
                    continue;
                }

                Map<String, String> rowData = new LinkedHashMap<>();
                for (int colIndex = 0; colIndex < columnCount; colIndex++) {
                    Cell cell = row.getCell(colIndex);
                    String cellValue = cell != null ? getCellValueAsString(cell) : "";
                    rowData.put("column_" + colIndex, cellValue.trim());
                }

                rows.add(rowData);
            }

            workbook.close();

            // –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
            ParsedFileDataDTO result = new ParsedFileDataDTO();
            result.setFileName(file.getOriginalFilename());
            result.setFileSize(file.getSize());
            result.setColumnNames(columnNames);
            result.setRows(rows);
            result.setTotalRows(rows.size());

            return result;

        } catch (IOException e) {
            throw new RuntimeException("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ Excel —Ñ–∞–π–ª–∞: " + e.getMessage(), e);
        }
    }


    /**
     * –ü–∞—Ä—Å–≤–∞ CSV —Ñ–∞–π–ª.
     * –ò–∑–ø–æ–ª–∑–≤–∞ OpenCSV –∫–æ–π—Ç–æ —Å–µ —Å–ø—Ä–∞–≤—è –¥–æ–±—Ä–µ —Å —Ä–∞–∑–ª–∏—á–Ω–∏ delimiters –∏ encoding-–∏.
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞ delimiter-–∞ (–∑–∞–ø–µ—Ç–∞—è, —Ç–æ—á–∫–∞ –∏ –∑–∞–ø–µ—Ç–∞—è, tab).
     */
    private ParsedFileDataDTO parseCsvFile(MultipartFile file) {
        try {
            // –ß–µ—Ç–µ–º —Ñ–∞–π–ª–∞ —Å UTF-8 encoding
            BufferedReader reader = new BufferedReader(
                    new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8)
            );

            // OpenCSV –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ parse-–≤–∞ CSV —Ñ–æ—Ä–º–∞—Ç–∞
            CSVReader csvReader = new CSVReaderBuilder(reader)
                    .withSkipLines(0) // –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–º–µ –Ω–∏–∫–∞–∫–≤–∏ —Ä–µ–¥–æ–≤–µ
                    .build();

            List<String[]> allRows = csvReader.readAll();
            csvReader.close();

            if (allRows.isEmpty()) {
                throw new IllegalArgumentException("CSV —Ñ–∞–π–ª—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω");
            }

            // –ü—ä—Ä–≤–∏—è—Ç —Ä–µ–¥ –µ header
            String[] headerRow = allRows.get(0);
            List<String> columnNames = new ArrayList<>();

            for (int i = 0; i < headerRow.length; i++) {
                String columnName = headerRow[i] != null && !headerRow[i].trim().isEmpty()
                        ? headerRow[i].trim()
                        : "–ö–æ–ª–æ–Ω–∞ " + (i + 1);
                columnNames.add(columnName);
            }

            // –ß–µ—Ç–µ–º –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ —Å –¥–∞–Ω–Ω–∏
            List<Map<String, String>> rows = new ArrayList<>();

            for (int rowIndex = 1; rowIndex < allRows.size(); rowIndex++) {
                String[] rowArray = allRows.get(rowIndex);

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Ä–µ–¥—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω
                if (isArrayEmpty(rowArray)) {
                    continue;
                }

                Map<String, String> rowData = new LinkedHashMap<>();

                for (int colIndex = 0; colIndex < headerRow.length; colIndex++) {
                    String cellValue = colIndex < rowArray.length && rowArray[colIndex] != null
                            ? rowArray[colIndex].trim()
                            : "";
                    rowData.put("column_" + colIndex, cellValue);
                }

                rows.add(rowData);
            }

            // –°—ä–∑–¥–∞–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞
            ParsedFileDataDTO result = new ParsedFileDataDTO();
            result.setFileName(file.getOriginalFilename());
            result.setFileSize(file.getSize());
            result.setColumnNames(columnNames);
            result.setRows(rows);
            result.setTotalRows(rows.size());

            return result;

        } catch (Exception e) {
            throw new RuntimeException("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ CSV —Ñ–∞–π–ª–∞: " + e.getMessage(), e);
        }
    }

    /**
     * –ò–∑–≤–ª–∏—á–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ Excel cell –∫–∞—Ç–æ String.
     * –û–±—Ä–∞–±–æ—Ç–≤–∞ —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ —Ç–∏–ø–æ–≤–µ –∫–ª–µ—Ç–∫–∏ - —á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º—É–ª–∞, –¥–∞—Ç–∞.
     */
    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }

        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();

            case NUMERIC:
                // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –¥–∞—Ç–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ —á–∏—Å–ª–æ—Ç–æ –±–µ–∑ –Ω–∞—É—á–Ω–∞ –Ω–æ—Ç–∞—Ü–∏—è
                    double numericValue = cell.getNumericCellValue();
                    // –ê–∫–æ –µ —Ü—è–ª–æ —á–∏—Å–ª–æ –ø–æ–∫–∞–∑–≤–∞–º–µ –≥–æ –±–µ–∑ decimal —Ç–æ—á–∫–∞
                    if (numericValue == Math.floor(numericValue)) {
                        return String.valueOf((long) numericValue);
                    } else {
                        return String.valueOf(numericValue);
                    }
                }

            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());

            case FORMULA:
                // –ó–∞ —Ñ–æ—Ä–º—É–ª–∏ –≤–∑–µ–º–∞–º–µ –∏–∑—á–∏—Å–ª–µ–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –∞ –Ω–µ —Å–∞–º–∞—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞
                try {
                    return String.valueOf(cell.getNumericCellValue());
                } catch (IllegalStateException e) {
                    try {
                        return cell.getStringCellValue();
                    } catch (IllegalStateException e2) {
                        return "";
                    }
                }

            case BLANK:
                return "";

            default:
                return "";
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ Excel —Ä–µ–¥ –µ –ø—Ä–∞–∑–µ–Ω.
     * –ü—Ä–∞–∑–µ–Ω —Ä–µ–¥ –µ —Ä–µ–¥ –∫—ä–¥–µ—Ç–æ –≤—Å–∏—á–∫–∏ –∫–ª–µ—Ç–∫–∏ —Å–∞ –ø—Ä–∞–∑–Ω–∏ –∏–ª–∏ null.
     */
    private boolean isRowEmpty(Row row) {
        if (row == null) {
            return true;
        }

        for (int i = 0; i < row.getLastCellNum(); i++) {
            Cell cell = row.getCell(i);
            if (cell != null && cell.getCellType() != CellType.BLANK) {
                String value = getCellValueAsString(cell);
                if (!value.trim().isEmpty()) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –º–∞—Å–∏–≤ –æ—Ç String-–æ–≤–µ –µ –ø—Ä–∞–∑–µ–Ω.
     */
    private boolean isArrayEmpty(String[] array) {
        if (array == null || array.length == 0) {
            return true;
        }

        for (String value : array) {
            if (value != null && !value.trim().isEmpty()) {
                return false;
            }
        }

        return true;
    }

    /**
     * –ò–∑–≤–ª–∏—á–∞ file extension –æ—Ç –∏–º–µ –Ω–∞ —Ñ–∞–π–ª.
     */
    private String getFileExtension(String fileName) {
        int lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex > 0 && lastDotIndex < fileName.length() - 1) {
            return fileName.substring(lastDotIndex + 1);
        }
        return "";
    }
}